:
----------------
- James Gosling
- Biggest advantage - Platform independent - achieved with .class file.

- Program - how it compiles, how it runs
class, Object
- OOPS concepts
    - Inheritence - Need to notes
	- Polymorphism - Added Done.
	- abstraction - 
	- Encapsulation
	- Aggregation
	- Composition

    - Interfaces
	- abstract classes and methods
- Datatypes.	
- default, private, protected, public.
- static, final
- How to work with conditions
- loops
- Switch statements
- Exception Handling
- Multi Threading
- Collections framework.
-------------------------------------------------------------------------------------------

Class - 
  action - driving - method
  properties - variables. - ex. music, steering, type of gear.
  
Dog - bark, swinging of tail - method
properties - tail, legs, eyes


- Object. - Instance of a class. - new 


How it compiles :

hardware
-----
OS
----
JVM
----
java

compiling a program:
---------------------
javac filename

Running a program:
--------------------
java className

Java Helloworld sample:
String args[] - To read command line arguments.

Class: - Always it should be noun
Method - Always it should be verb.
-----------------

Compile Time Polymorphism   
-----------------------------------
Same Method name with different parameters.-Key1
The linking will happen while compiling. - Key2
this is also called method overloading

Runtime Polymorphism
------------------------
Runtime polimorphism will happen in case of parent child relationship.
This will have Same method signature.
The linking will happen at runtime.

Abstraction:
--------------
Hiding unnecessary details to the end user. Ex: car - Steering, Gearbox and ABC are interfaces.
Abstraction in java can be achieved via abstract methods, interfaces.

Abstract methods:
----------------------------------
   public void abstractmethod();


Abstract Class : It consists of alteast one abstract method 
Concrete class : It dont have any abstract methods. It will have methods with body.

concreate method: It has body.
abstract method : It dont have body, it has declaration.

If there is an abstract method inside a class then the class should be abstract.
Abstarct class can have non abstarct methods.

If a class extends absract class then the child class should be an abstarct class or it should override the abstract methods.

Class GoogleApis implements Apis{
  - fetch mails from gmail. public void fetchGmailInfo(){ }
  - get photos from drive.
  - get docs from google docs.
  }
  
class yahooAPI extends GoogleApis {
   - fetch mail from yahooAPI -
   public void fetchGmailInfo(){
    hit yahoomail and fetch data
    }
  }


interfaces:
   ***** It Provides 100% abstraction.It dont have concrete methods.



How exactly we use overriding.

website login - 
User - account - 
Flag- G/Y/F
   interface Apis{
     fetchMail();
	 fetchphotos();
	 getDocs();
   }

Apis getAPIClass(){
  if(key == 'G')  
    return new GoogleApis();
   if(key == 'Y')	
    return new YahooApis();
   if(key == 'F')
	return new FacebookAPI();
	
	
Class GoogleApis implements Apis{
  fetchMail(); - fetch mails from gmail. public void fetchGmailInfo(){ }
  fetchphotos(); - get photos from drive.
  getDocs();- get docs from google docs.
  }
  
class yahooAPI implements Apis {
  fetchMail(); - fetch mail from yahooAPI -
   fetchphotos(); public void fetchGmailInfo(){
   getDocs(); hit yahoomail and fetch data
    }
  }

class FacebookAPI implements Apis {
   fetchMail()- fetch mail from facebook -
   fetchphotos(); -public photos from FB(){
    getDocs();fetch docs from FB()
    }
  }

  