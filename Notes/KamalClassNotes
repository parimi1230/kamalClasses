:
----------------
- James Gosling
- Biggest advantage - Platform independent - achieved with .class file.

- Program - how it compiles, how it runs
class, Object
- OOPS concepts
    - Inheritence - Need to notes
	- Polymorphism - Added Done.
	- abstraction - abstract classes, methods, interfaces
	- Encapsulation - Combining data and behaviour together is called encapsulation.
	- Association - Arranging Unrelated class in a group.
	- Aggregation - Arrangaing related classes as a group, but one class can exist without the other.
	- Composition - Arrangaing related classes as a group, but one class cannot exist without the other
    - Interfaces
	- abstract classes and methods - Dont do
- Datatypes.
- private, default, protected, public . - access specifiers/modifiers
- final, static.
- Scopes and garbage collection.
  --Method level- A variable declared inside a method can be used inside that method only
  -- Class Level- A variable declared inside a class can be used across that methods of that class
  - Garbage collection: Java keeps watch on variables and removes them after usage from memory
- Operators:
   --Arithmetic operators: +,-,*,/,%(modulo division)
   --Logical operators: And(&&),OR(||),<,>,<=,>=,== - Just Checking
- How to work with conditions:
- loops
- Switch statements
- Exception Handling
- Multi Threading
- Collections framework.
- static classes
- Miscellaneous


- Test Cherry pick Option.....

-- postgres SQL
-- MongoDB sample.

-------------------------------------------------------------------------------------------

Class - 
  action - driving - method
  properties - variables. - ex. music, steering, type of gear.
  
Dog - bark, swinging of tail - method
properties - tail, legs, eyes


- Object. - Instance of a class. - new 


How it compiles :

hardware
-----
OS
----
JVM
----
java

compiling a program:
---------------------
javac filename

Running a program:
--------------------
java className

Java Helloworld sample:
String args[] - To read command line arguments.

Class: - Always it should be noun
Method - Always it should be verb.
-----------------

Compile Time Polymorphism   
-----------------------------------
Same Method name with different parameters.-Key1
The linking will happen while compiling. - Key2
this is also called method overloading

Runtime Polymorphism
------------------------
Runtime polimorphism will happen in case of parent child relationship.
This will have Same method signature.
The linking will happen at runtime.

Abstraction:
--------------
Hiding unnecessary details to the end user. Ex: car - Steering, Gearbox and ABC are interfaces.
Abstraction in java can be achieved via abstract methods, interfaces.

Abstract methods:
----------------------------------
   public void abstractmethod();


Abstract Class : It consists of alteast one abstract method 
Concrete class : It dont have any abstract methods. It will have methods with body.

concreate method: It has body.
abstract method : It dont have body, it has declaration.

If there is an abstract method inside a class then the class should be abstract.
Abstarct class can have non abstarct methods.

If a class extends absract class then the child class should be an abstarct class or it should override the abstract methods.

Class GoogleApis implements Apis{
  - fetch mails from gmail. public void fetchGmailInfo(){ }
  - get photos from drive.
  - get docs from google docs.
  }
  
class yahooAPI extends GoogleApis {
   - fetch mail from yahooAPI -
   public void fetchGmailInfo(){
    hit yahoomail and fetch data
    }
  }


interfaces:
***** It Provides 100% abstraction.It dont have concrete methods.
*** To define strict rules and definitions for the implementing classes. 


Encapsulation:
Combining data and behaviour together is called encapsulation.


class Employee{
   
   private String eName;
   
   public String getEName(){
     return this.eName;
   }
    
   public void setEName(String eName){
     this.eName = eName
   }
   
   public static void main(String args[]){
      Employee emp = new Employee();
   }
   
}



DataTypes :
------------------
What is data type: it is used to say which type of data the variable is going to hold.

1 byte - 8 bits
1 kiloByte - 1024 bytes
1 Megabyte - 1024 KB
1 GB - 1024 MB
1 TB - 1024 GB

primitive                                
    boolean - 1 bit 0/1
	char - 2 bytes (16 bits)
	byte - 1 byte - -2 pow 8 to +2 pow 8
	short - 2 byte - 
	int  - 4 byte - 2 pow 32
	long - 8 byte - 2 pow 64	
	float - 4 bytes - 2 pow 32  - it has holder for decimal and whole number
	double - 8 bytes - 2 pow 64 it has holder for decimal and whole number.
	
int i = 10;
int j = 10;

non-priimtive
  String - Group of characters. 
     - It has special memory called String literal pool. Which helps in reusability
     
	 String str = "abc" ;    
     Strinig str2 = "abc";	
	 
	 String str3 = "abcd"
	 String str4 = "abcd"	
	 
	 
	 In the above only two values will get created "abc", "abcd" in string literal pool


Array -
    Its a Collection of same type of elements.
  int[] a = new int[10];
  a = {1, 5 ,6, 10, 12, 13, 14}
  
  a[0], a[1], a[]
  
   - Type of class - See Employee class above, (when we create object refernce, That reference class is called type of class.)
  
Wrapper classes:
    Boolean
	Character
	Short
	Byte
	Integer.parseInt
	Long
	Float
	Double.parseDouble
	
    
"1234" - Integer
"1234" - double


Instance variables, - By creating objects we will access variables those are Instance variables
class variables and - Without creating object we can the variables, static varaibles are class variables.
method variables - The varaibles which are inside a method.


- private - Done 
default -  
protected, 
public
Levels of usage:
   method level
   variable level

--------------  	
Final Keyword.
--------------
	variable: We cant reassign another value to a final varialbe.
	------------------------
	final datatype nameOfvariable = "varaiable initialization";

	final int i = 10;

	i = 20; //we cant reassign another value for a final variable

	final float pi = 3.1413;

	method : We cannot override final method.
	-------
	AppleHigherManagement:
	final getFounder(){
	 return "steve jobs";
	}

	MacintoshManagement extends AppleHigherManagement{

	}

	MacintoshManagement.getFounder() - Steve jobs

	class: We cannot inherit a final class.
	---------------------------------------
		// create a final class
	// create another class
	// try to inherit final class in another class.
    

Static:  Without creating instance we can use members(i.e variables, methods) of class.
-------
	Varibles : 
	   You can create a static variable by placing static keyword in your variable declaration.
	   Static variables can be accessed without creating instance for the class that holds the static variable.
	methods:
	   You can create a static method by placing static keyword in your method declaration.
	   Static method can be accessed without creating instance for the class that holds the static methods.
	block: 
	   A static block dont have any method signature it will have static keyword followed by block.
	    ex: static{}
	   usage: If we want to execute a group of statements before loading our classes then we go for static block.	
	   
	class: Will discuss in another session

// Create a class and have a static varaible inside it.
// Create another class and have main method inside it.
// Try to access static variable without creating instance.
















---------------------------------------------------
How exactly we use overriding.

website login - 
User - account - 
Flag- G/Y/F
   interface Apis{
     fetchMail();
	 fetchphotos();
	 getDocs();
   }

Apis getAPIClass(){
  if(key == 'G')  
    return new GoogleApis();
   if(key == 'Y')	
    return new YahooApis();
   if(key == 'F')
	return new FacebookAPI();
	
	
Class GoogleApis implements Apis{
  fetchMail(); - fetch mails from gmail. public void fetchGmailInfo(){ }
  fetchphotos(); - get photos from drive.
  getDocs();- get docs from google docs.
  }
  
class yahooAPI implements Apis {
  fetchMail(); - fetch mail from yahooAPI -
   fetchphotos(); public void fetchGmailInfo(){
   getDocs(); hit yahoomail and fetch data
    }
  }

class FacebookAPI implements Apis {
   fetchMail()- fetch mail from facebook -
   fetchphotos(); -public photos from FB(){
    getDocs();fetch docs from FB()
    }
  }

  ------------------------------------

Conditions:
    decision(Boolean)
       |
	-----------
	|          |
	Yes        No


     number > 0
	   |
 -----------------
 |                |
Number is +ve    Number is -ve


if(number > 0){ // we use Logical operators for decision making.
  print number is +ve;
}else{
  print number is -ve;
}

Functionality description:
-------------------------
method should accept a number:
Then do decision making in that mathod using the number passed as param.

main -> create instance.

else if: If we want enter into a first successful condition by skipping rest of the condition checks we are using else if

1. create a method, it should accept a number
2. Check if number is -ve, check wether number is less 30, less than 20, less than 10


switch statement:It has 4 keywords : switch,case,break,default
switch: It will have expression that tells us which case it has to go
case: based on the conditions satisfied in switch, it holds a set of instruction to execute
break: it breaks the flow once the case is executed
default: if none of the cases are satisfied the default will executed
switch {

                    case: 10:
                       sout(equal to 10);
                       break;
                    case: 20:
                       sout(equal to 20);
                       sout(equal to 20);
                       break;
                    case: 30:
                       sout(equal to 20);
                       sout(equal to 20);
                       break;
                    case: 40:
                       sout(equal to 20);
                       sout(equal to 20);
                       break;

                    default:
                       sout(Your enetered number is not is matching criteria);
                       break;

                 }


Area - Satyavedu town ki 2 kms

